#include "assert.h"
#include "Core\Math\Vector2D.h"
#include "GameCommon\PhysicsInfo.h"
#include "Core\Utility\Utility.h"
#include "EngineHigh\CollisionSystem\CollisionDetection.h"
namespace Physics {
	Vector2D update(PhysicsInfo & i_physicsInfo, const Vector2D & i_Forces, float i_dt) {
		SmartPtr<GameObject> temp_Object = i_physicsInfo.getGameObject().Aquire();
		assert(temp_Object != nullptr);
		
		Vector2D iniVelocity = i_physicsInfo.getVelocity();//store initial velocity
		float value_Velocity = (float)i_physicsInfo.getVelocity().getMagnitude();
		float value_Drag_Forece = value_Velocity * value_Velocity * i_physicsInfo.getDrag();
		Vector2D dragForece(0, 0);
		if (value_Velocity != 0) {
			float temp_Ratio = value_Drag_Forece / value_Velocity;
			dragForece.set_x(-1 * temp_Ratio * i_physicsInfo.getVelocity().get_x());
			dragForece.set_y(-1 * temp_Ratio * i_physicsInfo.getVelocity().get_y());
		}
		assert(i_physicsInfo.getMass());
		Vector2D acceleration = dragForece * (1 / i_physicsInfo.getMass());
		Vector2D temp_Velocity = i_physicsInfo.getVelocity() + acceleration * i_dt;//calculate velocity generated by drag
		if (temp_Velocity.get_x() *  i_physicsInfo.getVelocity().get_x() <= 0 && temp_Velocity.get_y() *  i_physicsInfo.getVelocity().get_y() <= 0) {
			i_physicsInfo.setVelocity(Vector2D(0, 0));//set velocity after drag
		}
		else {
			i_physicsInfo.setVelocity(i_physicsInfo.getVelocity() + acceleration * i_dt);//set velocity after drag
		}

		acceleration = i_Forces * (1 / i_physicsInfo.getMass());//calculate acceleration generated by all the rest forces
		i_physicsInfo.setVelocity(i_physicsInfo.getVelocity() + acceleration * i_dt);
	
		Vector2D outputVelocity = (i_physicsInfo.getVelocity() + iniVelocity) * 0.5;
		//temp_Object->setPosition(temp_Object->getPosition() + outputVelocity * i_dt);

		return outputVelocity;
	}
}